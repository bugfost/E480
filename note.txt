时光穿梭

1、版本回退

$ git reset --hard HEAD~X
或者：git reset --hard 版本号前4位






3、管理修改
Git管理的是修改，而不是文件

——————    —    —    —    —    —    —
|     版本库     |                                             |
——————    —    —    —    —    —    —
.            |                                        |
.    git diff --cached                git diff head
.    git diff --staged                         |
.            |                                        |
——————    —    —    —    —    —    —
|     暂存区     |                                            |
——————                                             |
.            |                                                     |
.        git diff                                                |
.            |                                                     |
——————                                             |
|     工作区     |                                            |
——————    —    —    —    —    —    —

git diff --cached 比较的是暂存区的文件与仓库分支里（上次git commit 后的内容）的区别。
git diff HEAD -- 命令可以查看工作区和版本库里面最新版本的区别。


4、撤销修改

$ git checkout -- readme.txt

让这个文件回到最近一次git commit或git add时的状态。

一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

总结1：

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

$ git checkout -- readme.txt

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。

$ git reset HEAD readme.txt
先回到工作区
$ git checkout -- readme.txt
再撤回修改

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

$ git reset --hard HEAD~X


总结2：

1.文件操作和对应的区变化
文件 | 文件修改后 | add  | add后   | commit（提交） | commit后
        |  工作区       |          | 暂存区 |                            |当前分支（head）
2.
add 之前的状态还原 git checkout -- [文件名]
add 之后的文件还原 git reset --hard HEAD 再git checkout -- [文件名]
commit 之后的文 件还原 git reset --hard HEAD^或 git reset --hard [版本号]
3.
正常操作是先git status 通过git状态选择对应的回退操作
实际工作中没这么细致, 有时是技术不到家，有时是想保留备份，通常都会先提交保留一个版本，然后选择是否回退,虽然很少会回到未来~
4.
像我自己写教程也会有这样的问题，新手卡死的点，老手完全注意不到
所以廖的这个教程被好多人推荐，懂得人觉得他讲的很细致,点都讲到了,新手看的时候一头雾水
我就是实例,看了n多次


5、删除文件

$ rm test.txt

直接删除文件

一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：
$ git rm test.txt
$ git commit -m "remove test.txt"

另一种情况是删错了，恢复方法如下

$ git checkout -- test.txt

git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。



总结：

当你要删除文件的时候，可以采用命令：rm test.txt

这个时候有两种情况

第一种情况:的确要把test.txt删掉，那么可以执行
                   git rm test.txt
                   git commit -m "remove test.txt"
                   文件被删除，且删除记录上传本地库

第二种情况:误删文件，想恢复，这时候还没有commit -m "remove test.txt"，执行git checkout test.txt将文件恢复。

如果执行完git commit -m "remove test.txt"后就不能用checkout恢复了，得用git reset --hard HEAD^










